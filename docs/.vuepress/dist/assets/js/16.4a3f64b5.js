(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{372:function(a,t,s){"use strict";s.r(t);var n=s(42),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),s("p",[a._v("final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。\n可能")]),a._v(" "),s("h2",{attrs:{id:"不同的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同的作用域"}},[a._v("#")]),a._v(" 不同的作用域")]),a._v(" "),s("h3",{attrs:{id:"作用与类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用与类"}},[a._v("#")]),a._v(" 作用与类")]),a._v(" "),s("p",[a._v("当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。")]),a._v(" "),s("p",[s("strong",[a._v("注意：")]),a._v(" final类中的所有方法都隐式为final，因为无法覆盖他们，所以在final类中给任何方法添加final关键字是没有任何意义的。")]),a._v(" "),s("h3",{attrs:{id:"作用于方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用于方法"}},[a._v("#")]),a._v(" 作用于方法")]),a._v(" "),s("ul",[s("li",[a._v("private 方法是隐式的final")]),a._v(" "),s("li",[a._v("final方法是可以被重载的")])]),a._v(" "),s("h3",{attrs:{id:"修饰参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰参数"}},[a._v("#")]),a._v(" 修饰参数")]),a._v(" "),s("p",[a._v("Java允许在参数列表中以声明的方式将参数指明为final，这意味这你无法在方法中更改参数引用所指向的对象。这个特性主要用来向匿名内部类传递数据。")]),a._v(" "),s("h3",{attrs:{id:"修饰变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰变量"}},[a._v("#")]),a._v(" 修饰变量")]),a._v(" "),s("blockquote",[s("p",[a._v("常规的用法比较简单，这里通过下面三个问题进一步说明。")])]),a._v(" "),s("p",[s("strong",[a._v("1. 编译期常量和非编译期常量")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//编译期常量")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("J")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//非编译期常量")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),a._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("k的值由随机数对象决定，所以不是所有的final修饰的字段都是编译期常量，只是k的值在被初始化后无法被更改。")]),a._v(" "),s("p",[s("strong",[a._v("2. static final")])]),a._v(" "),s("p",[a._v("一个既是static又是final 的字段只占据一段不能改变的存储空间，它必须在定义的时候进行赋值，或者在静态代码块进行赋值，否则编译器将不予通过。")]),a._v(" "),s("p",[s("strong",[a._v("3. blank final")])]),a._v(" "),s("p",[a._v("Java允许生成空白final，也就是说被声明为final但又没有给出定值的字段，但是必须在该字段被使用之前被赋值，这给予我们两种选择：")]),a._v(" "),s("ul",[s("li",[a._v("在定义处进行赋值(这不叫空白final)")]),a._v(" "),s("li",[a._v("在构造器中进行赋值，保证了该值在被使用前赋值。")])]),a._v(" "),s("p",[a._v("这增强了final的灵活性。")]),a._v(" "),s("h2",{attrs:{id:"final域重排序规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final域重排序规则"}},[a._v("#")]),a._v(" final域重排序规则")]),a._v(" "),s("p",[a._v("按照final修饰的数据类型分类：")]),a._v(" "),s("h3",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[a._v("#")]),a._v(" 基本数据类型")]),a._v(" "),s("ul",[s("li",[a._v("final域写：禁止final域写与构造方法重排序，即禁止final域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的final域全部已经初始化过。")]),a._v(" "),s("li",[a._v("final域读：禁止初次读对象的引用与读该对象包含的final域的重排序。")])]),a._v(" "),s("h3",{attrs:{id:"引用数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[a._v("#")]),a._v(" 引用数据类型")]),a._v(" "),s("p",[a._v("额外增加约束：禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序")]),a._v(" "),s("h2",{attrs:{id:"final的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final的实现原理"}},[a._v("#")]),a._v(" final的实现原理")]),a._v(" "),s("p",[a._v("写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。")]),a._v(" "),s("p",[a._v("很有意思的是，如果以X86处理为例，X86不会对写-写重排序，所以StoreStore屏障可以省略。由于不会对有间接依赖性的操作重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，以X86为例的话，对final域的读/写的内存屏障都会被省略！具体是否插入还是得看是什么处理器")])])}),[],!1,null,null,null);t.default=r.exports}}]);