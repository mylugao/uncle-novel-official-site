(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{382:function(t,v,a){"use strict";a.r(v);var _=a(42),r=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("通过反射，我们可以在运行时获得程序或程序集中每一个类型的成员和成员的信息。程序中一般的对象的类型都是在编译期就确定下来的，而 Java 反射机制可以动态地创建对象并调用其属性，这样的对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象，即使这个对象的类型在编译期是未知的。")]),t._v(" "),a("p",[t._v("反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。")]),t._v(" "),a("p",[t._v("Java 反射主要提供以下功能：")]),t._v(" "),a("ul",[a("li",[t._v("在运行时判断任意一个对象所属的类；")]),t._v(" "),a("li",[t._v("在运行时构造任意一个类的对象；")]),t._v(" "),a("li",[t._v("在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；")]),t._v(" "),a("li",[t._v("在运行时调用任意一个对象的方法")])]),t._v(" "),a("p",[t._v("重点：是运行时而不是编译时")]),t._v(" "),a("h2",{attrs:{id:"优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),a("h3",{attrs:{id:"反射的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射的优点"}},[t._v("#")]),t._v(" 反射的优点")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("可扩展性")]),t._v(" ：应用程序可以利用全限定名创建可扩展对象的实例，来使用来自外部的用户自定义类。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("类浏览器和可视化开发环境")]),t._v(" ：一个类浏览器需要可以枚举类的成员。可视化开发环境（如 IDE）可以从利用反射中可用的类型信息中受益，以帮助程序员编写正确的代码。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("调试器和测试工具")]),t._v(" ： 调试器需要能够检查一个类里的私有成员。测试工具可以利用反射来自动地调用类里定义的可被发现的 API 定义，以确保一组测试中有较高的代码覆盖率。")])])]),t._v(" "),a("h3",{attrs:{id:"反射的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射的缺点"}},[t._v("#")]),t._v(" 反射的缺点")]),t._v(" "),a("p",[t._v("尽管反射非常强大，但也不能滥用。如果一个功能可以不用反射完成，那么最好就不用。在我们使用反射技术时，下面几条内容应该牢记于心。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("性能开销")]),t._v(" ：反射涉及了动态类型的解析，所以 JVM 无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被执行的代码或对性能要求很高的程序中使用反射。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("安全限制")]),t._v(" ：使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如 Applet，那么这就是个问题了。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("内部暴露")]),t._v(" ：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用，这可能导致代码功能失调并破坏可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。")])])]),t._v(" "),a("h2",{attrs:{id:"反射原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射原理"}},[t._v("#")]),t._v(" 反射原理")]),t._v(" "),a("p",[t._v("以下内容只供参考，不一定官方。")]),t._v(" "),a("p",[t._v("反射原理就是将类的.class文件进行类加载进入JVM，得到了对应的Class对象，然后通过class对象及参数个数获得方法、属性、成员之类的，再通过invoke方法调用。invoke方法是一个Native方法。")]),t._v(" "),a("p",[t._v("推荐阅读："),a("a",{attrs:{href:"https://www.jianshu.com/p/3ea4a6b57f87",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入分析Java方法反射的实现原理"),a("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);